buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.4'
        classpath 'com.android.tools.build:gradle:0.10+'
        classpath 'org.robovm:robovm-gradle-plugin:1.0.0-beta-04'
    }
}

subprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "maven"
    apply plugin: "java"
    
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

	group = 'org.mini2Dx'
    version = '0.11.0-SNAPSHOT'
    
    uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: "http://maven.mini2dx.org/content/repositories/releases") {
					if(project.hasProperty('mini2DxMavenUser')) {
						authentication(userName: project.property('mini2DxMavenUser'), password: project.property('mini2DxMavenPassword'))
					}
    			}
    			snapshotRepository(url: "http://maven.mini2dx.org/content/repositories/snapshots") {
    				if(project.hasProperty('mini2DxMavenUser')) {
    					authentication(userName: project.property('mini2DxMavenUser'), password: project.property('mini2DxMavenPassword'))
    				}
    			}
			}
		}
	}

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
    
    ext {
    	gdxVersion="1.5.4"
		roboVMVersion="1.0.0-beta-04"
		androidVersion="4.4"
		beanutilsVersion="1.8.3"
		langVersion="3.1"
		reflectionsVersion="0.9.9-RC1"
		simpleXmlVersion="2.7.1"
		gsonVersion="2.3"
		
		junitVersion="4.8.1"
		jmockVersion="2.5.1"
		
		//org.gradle.daemon="true"
		//org.gradle.jvmargs="-Xms128m -Xmx256m"
		//org.gradle.configureondemand="true"
    }
    
    tasks.eclipse.doLast {
    	delete ".project"
	}
}

project(":" + rootProject.name + "-core") {
    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-bullet:$gdxVersion"
        compile "com.badlogicgames.box2dlights:box2dlights:1.2"
        
        compile "org.apache.commons:commons-lang3:$langVersion"
        compile "commons-beanutils:commons-beanutils:$beanutilsVersion"
        
        testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-desktop") {
    dependencies {
    	compile project(":" + rootProject.name + "-core")
    	
    	compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-desktop"
    	
    	compile "org.reflections:reflections:$reflectionsVersion"
    	compile "org.simpleframework:simple-xml:$simpleXmlVersion"
    	compile "com.google.code.gson:gson:$gsonVersion"
    	
    	testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(":" + rootProject.name + "-core").sourceSets.test.output
    }
}

project(":" + rootProject.name + "-android") {
    dependencies {
    	compile project(":" + rootProject.name + "-core")
    	
    	compile files(fileTree(dir: 'libs', includes: ['*.jar']))
    	
    	testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(":" + rootProject.name + "-core").sourceSets.test.output
    }
}

project(":" + rootProject.name + "-ios") {
    dependencies {
    	compile project(":" + rootProject.name + "-core")
        
        compile "org.reflections:reflections:$reflectionsVersion"
    	
    	testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-tiled") {
    dependencies {
		compile project(":" + rootProject.name + "-core")
		
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-uats") {
    dependencies {
    	compile project(":" + rootProject.name + "-tiled")
    
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-desktop"
        
        testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-uats-desktop") {
    dependencies {
        compile project(":" + rootProject.name + "-uats")
        compile project(":" + rootProject.name + "-desktop")
        
        testCompile "junit:junit:$junitVersion"
        testCompile "org.jmock:jmock-junit4:$jmockVersion"
        testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-uats-android") {
    dependencies {
        compile project(":" + rootProject.name + "-uats")
        compile project(":" + rootProject.name + "-android")
        
        testCompile "junit:junit:$junitVersion"
        testCompile "org.jmock:jmock-junit4:$jmockVersion"
        testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-uats-ios") {
    dependencies {
        compile project(":" + rootProject.name + "-uats")
        compile project(":" + rootProject.name + "-ios")
        
        testCompile "junit:junit:$junitVersion"
        testCompile "org.jmock:jmock-junit4:$jmockVersion"
        testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

task docs(type: Javadoc) {
    source subprojects.collect {project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
    destinationDir = new File(projectDir, 'docs')
}